<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.javaclimb.music.dao.CollectMapper">
    <resultMap id="BaseResultMap" type="com.javaclimb.music.domain.Collect">  <!--resultMap id="BaceResultMap 可以引用id-->
    <id column="id" jdbcType="INTEGER" property="id"/><!-- 上面包 jdbcType：表示数据库中的字段类型  column 数据库的属性    property：指id的属性   -->
    <result column="user_id" jdbcType="INTEGER" property="userId"/>
    <result column="type" jdbcType="TINYINT" property="type"/>   <!--tinyint == TINYITNT-->
    <result column="song_id" jdbcType="INTEGER" property="songId"/>
    <result column="song_list_id" jdbcType="INTEGER" property="songListId"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>  <!--Date == timestamp-->

</resultMap>

    <sql id="Blob_Column_List">
         id,user_id,type,song_id,song_list_id,create_time
    </sql>
    <insert id="insert" parameterType="com.javaclimb.music.domain.Collect">
        insert into collect
        /*prefix 前面要加的 suffix：后面要加的 prefixOverrides 前面要去掉那些东西 suffixOverrides后面要去掉哪些东西*/
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            /*test= 的值是传过来的值*/
            <if test="userId!= null">
                user_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="songId != null">
                song_id,
            </if>

            <if test="songListId!= null">
                song_list_id,
            </if>
            create_time,
        </trim>
        <trim prefix=" values(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="userId!= null">
                #{userId},
            </if>
            <if test="type != null">
                #{type},
            </if>
            <if test="songId != null">
                #{songId},
            </if>

            <if test="songListId != null">
                #{songListId},
            </if>
            <!--收藏时间-->
            now(),
        </trim>
    </insert>



    <delete id="delete">
        delete from collect where id=#{id}
    </delete>
<!--    根据用户id和歌曲id进行删除-->
    <delete id="deleteIdOfUserId" parameterType="java.lang.Integer">
        delete from collect
        where  user_id=#{userId} and song_id=#{songId}
    </delete>

    <!--查询所有歌手-->
    <select id="allCollect" resultMap="BaseResultMap">
        select
        <include refid="Blob_Column_List"/>
        from collect
    </select>
    <!--根根据用户id查询-->
    <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Blob_Column_List"/>
        from collect
        where user_id = #{userId}
    </select>
    <!--查询某个用户是否收藏了这个歌曲-->
    <select id="existBySongId"  resultType="java.lang.Integer">
        select count(*)
        from collect
        where user_id=#{userId} and song_id=#{songId}
    </select>

</mapper>